Ofront+
=======

is a tool that translates Oberon programs into semantically equivalent C programs. Full error analysis is performed on the Oberon input program and in case of no errors up to three files per module are generated as output.

Ofront+ does not invoke the C compiler or linkage editor. This may be done in separate shell scripts or make files and is inherently dependent on the C compiler and linkage editor being used.

Although normally not read by the user, the C code generated by Ofront+ is kept as readable as possible, nicely formatted, should not produce any C compiler error messages or warnings and is tuned for efficient execution. In fact, an Oberon program translated by Ofront+ can be expected to execute as fast and read as well as an equivalent hand-coded C program.

Ofront+ is based on Ofront by Josef Templ, but supports not only Oberon/Oberon-2, and also a lot of Component Pascal and Oberon-07 features and experimental Oberon-3 dialect.


Installation
============

To start using Ofront+, you will need to build the translator (`ofront+` executable) and its libraries (libOfront). All this is done by a single build script that is located in `/Target/Linux_amd64/Bin/build` (substitute `Linux_amd64` with your target, i.e. `Win64`). Please see `QuickStart.txt` for more info.

Directory structure

/Docu      - Documentation
/Examples  - Sources of examples of Oberon programs
/Mod       - Sources of the translator and tools
/Mod/Lib   - Sources of libraries
/Target    - Target host platforms
  /*/Bin   - Build scripts
  /*/Lib   - Environment for build Ofront+ library
  /*/Obj   - Working directory for object files
  /*/Sym   - Symbol files (encoded interfaces)

To (re)build static library (lib)Ofront that is required for the translator and all examples, go to the corresponding directory /Target/*/Lib/Bin (it may be /Linux_amd64/Lib/Bin or other) and run build(.bat).

To (re)build the translator, go to the corresponding directory /Target/*/Bin and run build(.bat).

To (re)build examples, go to the corresponding directory /Target/*/Examples/Bin and run build(.bat).
You'll need to install additional packages (.dll for Windows).
Please read /Target/*/Examples/ReadMe.txt for more information.


Ofront+ differences from Ofront/voc
===================================

  1. New experimental dialect Oberon-3 (based on Oberon-07, Component Pascal and other).

  2. Outputs module name and position on any runtime error, HALT or ASSERT.

  3. New SYSTEM types: CHAR8, BYTE(UINT8), INT8, INT16, INT32, INT64, ADRINT, REAL32, REAL64.

  4. Allows arithmetic operations with type BYTE (Oberon-3 & Component Pascal).

  5. Allows unlimited length of constant strings (in Ofront/voc the maximum is 255).

  6. Allows SYSTEM.VAL(INTEGER, {80000000H..0FFFFFFFFH}) as a constant of 32-bit type (otherwise 64-bit).

  7. ASH and SYSTEM.LSH return INTEGER result for INTEGER argument, and LONGINT result for LONGINT argument. This allows shifting without using 64-bit type.

  8. Support "_" in identifiers.

  9. Ofront+ for Windows also works under Windows 9x. Ofront+ for Linux/BSD supports 32 and 64 bit architectures.

  10. Support UTF-8 encoded sources (with or without BOM) with EOL as 0DX (Oberon System), 0AX (UNIX/Linux) and 0DX+0AX (Windows).

  11. "Proper FOR" support (concept and implementation by Oleg Komlev).

  12. Constant arrays support in Oberon-3.

  13. BITS(), ORD(set), LEN(string$), str1 := str2$, IN/OUT procedure parameters, attributes NEW, ABSTRACT, LIMITED, EMPTY and EXTENSIBLE for records/methods (in Component Pascal).

  14. ORD(bool), ORD(set) support in Oberon-3.

  15. Arithmetic operations DIV0 and REM0 for integers, as in GPCP.

  16. SYSTEM flags: VAR [nil], ARRAY/RECORD [untagged], POINTER [untagged] as in BlackBox.

  17. Advanced features for defining bindings to foreign libraries, system flag [stdcall].

  18. It is possible to mix different Oberon dialects together in one project.

  19. Tested with GCC/MinGW, Clang, Tiny C (tcc), SDCC and Borland Turbo C.


Get it!
=======

Here you have:

  1. Ofront+ for Windows, Linux, macOS and FreeBSD command line.
  2. Ofront+ for BlackBox Component Builder (runs as a subsystem).

You can download it at https://github.com/Oleg-N-Cher/OfrontPlus
Bootstrap C sources at https://github.com/Oleg-N-Cher/OfrontPlus-bootstrap


Ofront+ now is in active development and we provide free support of the project.

To discuss and ask questions, you can join the forum:

  https://zx.oberon.org/forum/
  https://forum.oberoncore.ru/viewtopic.php?f=30&t=6344

Telegram group:

  https://t.me/ofrontplus

Your comments and suggestions are welcome.


Contributors
============

  Josef Templ, he is Ofront founder, inspirer & our really godfather!
  Oleg V. Komlev, implemented "proper FOR" and constant arrays for O3
  David C W Brown, very smart person who implemented real portability
  Stewart Greenhill, an experienced programmer and just a good person
  Oleg N. Cher, probably the biggest commiter to the Ofront+ project.
  Dmitry V. Dagaev, a very serious "nuclear" Multi-Oberon programmer.
  Robert D Campbell, our math guru, implemented ldexp and frexp func.
  Norayr Chilingarian, he really knows how to breed Armenian dragons!
  Artur Yefimov, he could have done more, but thank him for that too.
  Sergey A. Oborotov, he implemented improved smart support of Clang.
  GameHunter found the rarest bugs and helped us become more stable.

  ... also the entire OMinc team and all OP2 & ETH Oberon developers!
  ... sorry who we forgot. Please remind...


The Ofront+ team,
2013-2025
